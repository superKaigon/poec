package utils.asciiart;

import java.util.ArrayList;
import java.util.Random;

public class AsciiArtCommandPrompt {

	private static AsciiArtCommandPrompt instance = null;

	protected AsciiArtCommandPrompt() {
		// Exists only to defeat instantiation.
	}

	public static AsciiArtCommandPrompt getInstance() {
		if (instance == null) {
			instance = new AsciiArtCommandPrompt();
		}
		return instance;
	}

	private static final String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ?";
	private static final String ALPHABET_FULL = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

	private AsciiArtMode mode;
	private String message;

	private ArrayList<String> ascii = new ArrayList<String>();
	private int width = 0;
	private int height = 0;

	public void changeMode(AsciiArtMode mode) {
		this.mode = mode;

		switch (mode) {
		case light:
			loadAsciiLight();
			break;
		case huge:
			loadAsciiHuge();
			break;
		case random:
			loadAsciiRandom();
			break;
		case full:
			loadAsciiFull();
			break;
		default:
			break;
		}
	}

	private void loadAsciiFull() {
		ascii.clear();

		width = 6;
		height = 6;

		ascii.add("      " + "  .   " + " p q  " + " | |  " + " ,+.  "
				+ " _  , " + " ,-.  " + "  p   " + "   ,  " + "  .   "
				+ "  .   " + "      " + "      " + "      " + "      "
				+ "    / " + " ,-.  " + "  ,   " + " ,-.  " + " ,--, "
				+ "   ,. " + " ;--' " + " ,-.  " + ",---, " + " ,-.  "
				+ " ,-.  " + "      " + "      " + "      " + "      "
				+ "      " + " ,-.  " + " ,-.  " + "  ,.  " + " ,-.  "
				+ "  ,-. " + " ,-.  " + " ,--. " + " ,--. " + "  ,-. "
				+ " .  . " + "  ,   " + "   ,  " + " ,  , " + " ,    "
				+ ".   , " + " .  . " + " ,-.  " + " ;-.  " + " ,-.  "
				+ " ,-.  " + " ,-.  " + ",---. " + " .  . " + ".   , "
				+ ",   . " + ".   , " + ".   , " + ",---, " + " ,-   "
				+ "\\     " + " -.   " + "   A  " + "      " + "  q   "
				+ "      " + " .    " + "      " + "   .  " + "      "
				+ "      " + "      " + " .    " + "      " + "      "
				+ " ,    " + "  .   " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + " .    "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + " ,-  " + "  |   " + "  -.  " + "      ");
		ascii.add("      " + "  |   " + "      " + "-+-+- " + "( | ` "
				+ "(_)/  " + "(   ) " + "      " + "  /   " + "   \\  "
				+ "`.|,' " + "   |  " + "      " + "      " + "      "
				+ "   /  " + "/  /\\ " + " '|   " + "    ) " + "   /  "
				+ "  / | " + " |    " + "/     " + "   /  " + "(   ) "
				+ "(   ) " + "  o   " + "  o   " + "  ,'  " + " ---  "
				+ " `.   " + "(   ) " + "/ ,-\\ " + " /  \\ " + " |  ) "
				+ " /    " + " |  \\ " + " |    " + " |    " + " /    "
				+ " |  | " + "  |   " + "   |  " + " | /  " + " |    "
				+ "|\\ /| " + " |\\ | " + "/   \\ " + " |  ) " + "/   \\ "
				+ " |  ) " + "(   ` " + "  |   " + " |  | " + "|  /  "
				+ "| . | " + " \\ /  " + " \\ /  " + "   /  " + " |    "
				+ " \\    " + "  |   " + "  / \\ " + "      " + "      "
				+ "      " + " |    " + "      " + "   |  " + "      "
				+ "  ,-  " + "      " + " |    " + "  o   " + "  o   "
				+ " |    " + "  |   " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + " |    "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + " \\   " + "  |   " + "   /  " + " '\\,  ");
		ascii.add("      " + "  |   " + "      " + " | |  " + " `+.  "
				+ "  /_  " + " ;-: ," + "      " + "  |   " + "   |  "
				+ " / \\  " + "  -+- " + "      " + " ---  " + "      "
				+ "  /   " + "| / | " + "  |   " + "   /  " + "  `.  "
				+ " '--| " + " `-.  " + "|,-.  " + "  /   " + " ;-:  "
				+ " `-'| " + "      " + "      " + " <    " + "      "
				+ "   >  " + "  ,'  " + "| | | " + " |--| " + " |-<  "
				+ " |    " + " |  | " + " |-   " + " |-   " + " | -. "
				+ " |--| " + "  |   " + "   |  " + " |<   " + " |    "
				+ "| V | " + " | \\| " + "|   | " + " |-'  " + "|   | "
				+ " |-<  " + " `-.  " + "  |   " + " |  | " + "| /   "
				+ "| ) ) " + "  X   " + "  Y   " + "  /   " + " |    "
				+ "  \\   " + "  |   " + "      " + "      " + "      "
				+ " ,-:  " + " |-.  " + " ,-.  " + " ,-|  " + " ,-.  "
				+ "  |   " + " ,-:  " + " |-.  " + "  .   " + "  ,   "
				+ " | ,  " + "  |   " + ";-.-. " + " ;-.  " + " ,-.  "
				+ " ;-.  " + " ,-:  " + " ;-.  " + " ,-.  " + " |-   "
				+ " . .  " + " . ,  " + ", , , " + " . ,  " + " . .  "
				+ " ,-,  " + " <   " + "  |   " + "   >  " + "      ");
		ascii.add("      " + "      " + "      " + "-+-+- " + ". | ) "
				+ " /(_) " + "(   X " + "      " + "  \\   " + "   /  "
				+ "      " + "   |  " + "      " + "      " + "      "
				+ " /    " + "\\/  / " + "  |   " + "  /   " + "    ) "
				+ "    | " + "    ) " + "(   ) " + " /    " + "(   ) "
				+ "    / " + "  o   " + "  p   " + "  `.  " + " ---  "
				+ " ,'   " + "  '   " + "\\ `-' " + " |  | " + " |  ) "
				+ " \\    " + " |  / " + " |    " + " |    " + " \\  | "
				+ " |  | " + "  |   " + "   |  " + " | \\  " + " |    "
				+ "|   | " + " |  | " + "\\   / " + " |    " + "\\   X "
				+ " |  \\ " + ".   ) " + "  |   " + " |  | " + "|/    "
				+ "|/|/  " + " / \\  " + "  |   " + " /    " + " |    "
				+ "   \\  " + "  |   " + "      " + "      " + "      "
				+ " | |  " + " | |  " + " |    " + " | |  " + " |-'  "
				+ "  |-  " + " | |  " + " | |  " + "  |   " + "  |   "
				+ " |<   " + "  |   " + "| | | " + " | |  " + " | |  "
				+ " | |  " + " | |  " + " |    " + " `-.  " + " |    "
				+ " | |  " + " |/   " + "|/|/  " + "  X   " + " | |  "
				+ "  /   " + " /   " + "  |   " + "   \\  " + "      ");
		ascii.add("      " + "  o   " + "      " + " | |  " + " `+'  "
				+ "'     " + " `-' `" + "      " + "   `  " + "  '   "
				+ "      " + "      " + "      " + "      " + "  o   "
				+ "/     " + " `-'  " + "  '   " + " '--' " + " `-'  "
				+ "    ' " + " `-'  " + " `-'  " + "'     " + " `-'  "
				+ " `-'  " + "      " + "      " + "      " + "      "
				+ "      " + "  o   " + " `--' " + " '  ' " + " `-'  "
				+ "  `-' " + " `-'  " + " `--' " + " '    " + "  `-' "
				+ " '  ' " + "  '   " + "  -'  " + " '  ` " + " `--' "
				+ "'   ' " + " '  ' " + " `-'  " + " '    " + " `-' `"
				+ " '  ' " + " `-'  " + "  '   " + " `--` " + "'     "
				+ "' '   " + "'   ` " + "  '   " + "'---' " + " `-   "
				+ "    \\ " + " -'   " + "      " + "      " + "      "
				+ " `-`  " + " `-'  " + " `-'  " + " `-'  " + " `-'  "
				+ "  |   " + " `-|  " + " ' '  " + "  '   " + "  |   "
				+ " ' `  " + "  '   " + "' ' ' " + " ' '  " + " `-'  "
				+ " |-'  " + " `-|  " + " '    " + " `-'  " + " `-'  "
				+ " `-`  " + " '    " + "' '   " + " ' `  " + " `-|  "
				+ " '-'  " + " `-  " + "  |   " + "  -'  " + "      ");
		ascii.add("      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "  p   " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ "      " + "      " + "      " + " ---  " + "      "
				+ "      " + "      " + "      " + "      " + "      "
				+ " -'   " + " `-'  " + "      " + "      " + " -'   "
				+ "      " + "      " + "      " + "      " + "      "
				+ " '    " + "   `  " + "      " + "      " + "      "
				+ "      " + "      " + "      " + "      " + " `-'  "
				+ "      " + "     " + "      " + "      " + "      ");

	}

	private void loadAsciiRandom() {
		ascii.clear();

		width = 2;
		height = 2;

		for (int i = 0; i < height; i++) {
			String sub = "";
			for (int j = 0; j < width * 27; j++) {
				int result = 0;
				Random rand = new Random();
				int max = 128;
				int min = 32;
				result = rand.nextInt(max - min + 1) + min;
				sub += (char) result;
			}
			ascii.add(sub);
		}
	}

	private void loadAsciiHuge() {
		ascii.clear();

		width = 27;
		height = 9;

		// === Code for 6*6 ===
		ascii.add
				+ "____/\\\\\\\\\\\\\\____        ");
		ascii.add
				+ " _/\\\\\\//////\\\\\\__       ");
		ascii.add
				+ "  \\///_____\\//\\\\\\_      ");
		ascii.add
				+ "   __________/\\\\\\__     ");
		ascii.add("    _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        _\\/\\\\\\/////////\\\\\\_        _\\/\\\\\\_____________        _\\/\\\\\\_______\\/\\\\\\_        _\\/\\\\\\///////______        _\\/\\\\\\///////______        _\\/\\\\\\___\\/////\\\\\\_        _\\/\\\\\\/////////\\\\\\_        _____\\/\\\\\\_____        _________\\/\\\\\\_____        _\\/\\\\\\//_\\//\\\\\\____        _\\/\\\\\\_____________        _\\/\\\\\\__\\///\\\\\\/___\\/\\\\\\_        _\\/\\\\\\\\//\\\\\\\\/\\\\\\_        _\\/\\\\\\_______\\/\\\\\\_        _\\/\\\\\\/////////____        _\\//\\\\\\______/\\\\\\__        _\\/\\\\\\//////\\\\\\____        ______\\////\\\\\\______        _______\\/\\\\\\_______        _\\/\\\\\\_______\\/\\\\\\_        ___\\//\\\\\\__/\\\\\\____        __\\//\\\\\\__/\\\\\\\\\\__/\\\\\\___        ______\\/\\\\\\\\______        _______\\/\\\\\\_______        _______/\\\\\\/_______    "
				+ "    _______/\\\\\\\\/___    ");
		ascii.add
				+ "     ______/\\\\\\/_____   ");
		ascii.add
				+ "      _____\\///_______  ");
		ascii.add
				+ "       ______/\\\\\\______ ");
		ascii.add
				+ "        _____\\///_______");
	}

	private void loadAsciiLight() {
		ascii.clear();

		width = 6;
		height = 6;

		// === Code for 6*6 ===
		ascii.add(" ____  ____  ____  ____  _____ _____ _____ _     _     _  _  __ _     _      _      ____  ____  ____  ____  ____  _____  _     _     _     ___  ____  _ ____ "
				+ " ____ ");
		ascii.add("/  _ \\/  __\\/   _\\/  _ \\/  __//    //  __// \\ /|/ \\   / |/ |/ // \\   / \\__/|/ \\  /|/  _ \\/  __\\/  _ \\/  __\\/ ___\\/__ __\\/ \\ /\\/ \\ |\\/ \\  /|\\  \\//\\  \\///_   \\"
				+ "/ _  \\");
		ascii.add("| / \\|| | //|  /  | | \\||  \\  |  __\\| |  _| |_||| |   | ||   / | |   | |\\/||| |\\ ||| / \\||  \\/|| / \\||  \\/||    \\  / \\  | | ||| | //| |  || \\  /  \\  /  /   /"
				+ "\\/ \\ |");
		ascii.add("| |-||| |_\\\\|  \\__| |_/||  /_ | |   | |_//| | ||| |/\\_| ||   \\ | |_/\\| |  ||| | \\||| \\_/||  __/| \\_\\||    /\\___ |  | |  | \\_/|| \\// | |/\\|| /  \\  / /  /   /_"
				+ "   / /");
		ascii.add("\\_/ \\|\\____/\\____/\\____/\\____\\\\_/   \\____\\\\_/ \\|\\_/\\____/\\_|\\_\\\\____/\\_/  \\|\\_/  \\|\\____/\\_/   \\____\\\\_/\\_\\\\____/  \\_/  \\____/\\__/  \\_/  \\|/__/\\\\/_/   \\____/"
				+ "   \\/ ");
		ascii.add("                                                                                                                                                             "
				+ "   \\/ ");
	}

	private void printToCommandLineAlphaMaj() {
		if (mode == null) {
			mode = AsciiArtMode.light;
			loadAsciiLight();
		}

		String text = message.toUpperCase();

		// find the necessary indexes of letters
		ArrayList<Integer> indexes = new ArrayList<Integer>();
		for (char c : text.toCharArray()) {
			if (c < 'A' || c > 'Z')
				indexes.add(26);
			else {
				for (char letter : ALPHABET.toCharArray()) {
					if (c == letter) {
						indexes.add(ALPHABET.indexOf(letter));
					}
				}
			}
		}

		// print result
		for (int j = 0; j < height; j++) {
			for (int k = 0; k < indexes.size(); k++) {
				System.out.print(ascii.get(j).substring(indexes.get(k) * width,
						indexes.get(k) * width + width));
			}
			System.out.println();
		}
	}

	private void printToCommandLineFull() {
		if (mode != AsciiArtMode.full) {
			mode = AsciiArtMode.full;
			loadAsciiFull();
		}

		String text = message.toUpperCase();

		// find the necessary indexes of letters
		ArrayList<Integer> indexes = new ArrayList<Integer>();
		for (char c : text.toCharArray()) {
			if (c < ' ' || c > '~')
				indexes.add(31);
			else {
				for (char letter : ALPHABET_FULL.toCharArray()) {
					if (c == letter) {
						indexes.add(ALPHABET_FULL.indexOf(letter));
					}
				}
			}
		}

		// print result
		for (int j = 0; j < height; j++) {
			for (int k = 0; k < indexes.size(); k++) {
				try {
					System.out.print(ascii.get(j).substring(
							indexes.get(k) * width,
							indexes.get(k) * width + width));
				} catch (Exception e) {
					System.err.println(e);
				}

			}
			System.out.println();
		}
	}

	public void printlnAlhpaMaj(String message) {
		this.message = message;
		printToCommandLineAlphaMaj();
		System.out.println();
	}

	public void printAlhpaMaj(String message) {
		this.message = message;
		printToCommandLineAlphaMaj();
	}

	public void println(String message) {
		this.message = message;
		printToCommandLineFull();
		System.out.println();
	}

	public void print(String message) {
		this.message = message;
		printToCommandLineFull();
	}
}
